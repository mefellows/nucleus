Ext.define("Nucleus.di.Inject",{singleton:true,constructor:function(a){this.initConfig(a);this.registry={}},configure:function(a){console.log("Configuring dependencies. Pre-instantiating Singletons for autowired classes.");Ext.Object.each(a,function(b,c){console.log("Found dependency: "+b+", className: "+c.className);console.log("Checking to see if class has been instantiated..");classDefinition=Ext.ClassManager.get(c.className);if(!(classDefinition!=null)){console.warn("Synchronously loading '"+(c.className)+"'; consider adding Ext.require('"+(c.className)+"') above Ext.onReady.");Ext.syncRequire(c.className);classDefinition=Ext.ClassManager.get(c.className)}parameters=c.parameters!=null?[c.className].concat(c.parameters):[c.className];console.error("boo"+Ext.ClassManager.get(c.className).singleton);if(c.parameters!=null&&Array.isArray(c.parameters)&&c.parameters.length>0){console.log("class has constructor params, injecting into instance");console.log(parameters);instance=Ext.create.apply(this,parameters)}else{console.log("class does not have constructor params");instance=Ext.create.apply(this,parameters)}this.registry[b]=instance},this)},inject:function(a){var b=this;if(a.getInjected()){console.debug("Object has already been injected, ignoring")}else{console.debug("Object has not been injected, injecting...");if(Array.isArray(a.config.injects)){console.debug("Class contains dependency injection annotations");Ext.Array.each(a.config.injects,function(e,d){console.log("Found dependency with key ");console.log(e);var c=Ext.Object.getKeys(e).length>0?Ext.Object.getKeys(e)[0]:null;var f=Ext.Object.getValues(e)[0];b.generateGetter(a,c,f)})}else{console.debug("No dependencies set, although class set as Injectable")}a.setInjected(true)}},generateGetter:function(b,a,d){console.log("creating getter");var e=this;var c="get"+Ext.String.capitalize(a);b[c]=function(f){return function(){return e.registry[a]}}(a)},});Ext.define("Nucleus.di.mixin.Injectable",{extend:"Ext.mixin.Mixin",requires:["Nucleus.di.Inject"],config:{injected:false},constructor:function(a){this.initConfig(a);console.log("constructing Injectable mixin for class")},onClassMixedIn:function(b){var a=this;b.prototype.constructor=Ext.Function.createInterceptor(b.prototype.constructor,function(){console.log("mixed in!");Nucleus.di.Inject.inject(this)})},},function(a){console.log("creating injectable class...")});